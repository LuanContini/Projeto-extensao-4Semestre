<!-- views/clients.ejs -->
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <script src="https://cdn.jsdelivr.net/npm/inputmask/dist/inputmask.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Clientes</title>
    <style>
      * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: Arial, sans-serif;
      }

      body {
          background-color: #f5f5f5;
      }

      .sidebar {
          width: 100px;
          height: 100vh;
          background-color: #e8e3d9;
          position: fixed;
          left: 0;
          top: 0;
          padding-top: 20px;
          display: flex;
          flex-direction: column;
          align-items: center;
      }

      .sidebar .logo {
          width: 80px;
          height: auto;
          margin-bottom: 20px;
          display: block;
      }

      .sidebar-item {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 15px 0;
          color: #333;
          text-decoration: none;
          font-size: 13px;
          font-weight: bold;
      }

      .sidebar-item.profile {
          margin-top: auto;
      }

      .icon {
          width: 30px;
          height: 30px;
          margin-bottom: 5px;
      }

      .main-content {
          margin-left: 100px;
          padding: 20px;
      }

      .header {
          display: flex;
          align-items: center;
          margin-bottom: 30px;
      }

      .back-button {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 32px;
          height: 32px;
          border: 1px solid #000000;
          border-radius: 50%;
          background: none;
          cursor: pointer;
          font-size: 18px;
      }

      .page-title {
          flex-grow: 1;
          margin-left: 20px;
          font-size: 24px;
          font-weight: normal;
      }

      /* Client specific styles */
      .content-wrapper {
          display: flex;
          gap: 30px;
          padding: 0 20px;
      }

      .client-list {
          flex: 1;
          background: white;
          padding: 20px;
          border-radius: 8px;
      }

      .search-bar {
          display: flex;
          gap: 10px;
          margin-bottom: 20px;
      }

      .search-input {
          flex: 1;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
      }

      .add-client-btn {
          padding: 10px 20px;
          background-color: #5bb7c2;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
      }

      .clients-table {
          width: 100%;
          border-collapse: collapse;
      }

      .clients-table th,
      .clients-table td {
          padding: 12px;
          text-align: left;
          border-bottom: 1px solid #ddd;
      }

      .clients-table tr.selected {
          background-color: #f0f0f0;
      }

      .client-details {
          flex: 1;
          background: white;
          padding: 20px;
          border-radius: 8px;
      }

      .edit-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
      }

      .edit-btn {
          padding: 10px 20px;
          background-color: #1a1b4b;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
      }

      .delete-btn {
          padding: 10px 20px;
          background-color: #d9534f; /* Cor vermelha para o botão de exclusão */
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          margin-left: 10px; /* Espaçamento entre os botões */
      }

      .profile-upload {
          width: 100px;
          height: 100px;
          background-color: #f0f0f0;
          border-radius: 50%;
          margin-bottom: 20px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
      }

      .form-group {
          margin-bottom: 20px;
      }

      .form-group label {
          display: block;
          margin-bottom: 8px;
          color: #666;
          font-size: 14px;
      }

      .form-group input,
      .form-group textarea,
      .form-group select {
          width:  100%;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
      }

      .form-group textarea {
          resize: vertical; /* Permite redimensionar verticalmente */
          height: 100px; /* Altura padrão para o campo de observação */
      }

      .form-group input[type="file"] {
          padding: 0; /* Remove padding do input de arquivo */
      }
    </style>
  </head>
  <body>
    <%- include('../assets/menu.ejs') %>

    <div class="main-content">
      <div class="header">
        <button class="back-button">←</button>
        <h1 class="page-title">Clientes</h1>
      </div>

      <div class="content-wrapper">
        <div class="client-list">
            <div class="search-bar">
                <input type="text" class="search-input" placeholder="Nome, ID..." />
                <% if (usuario.tipo === 'Administrador') { %>
                <button class="add-client-btn">+ CLIENTE</button>
                <% } %>
            </div>
        
            <table class="clients-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nome</th>
                        <th>Telefone</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody id="clientTableBody">
                    <% clients.forEach(function(client) { %>
                    <tr data-id="<%= client.idContratante %>">
                        <td><%= client.idContratante %></td>
                        <td><%= client.nome %></td>
                        <td><%= client.telefone %></td>
                        <td><%= client.email %></td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>

        <div class="client-details" id="clientDetails" style="display: none;">
          <div class="edit-header">
            <h2>Informações do Cliente</h2>
            <% if (usuario.tipo === 'Administrador') { %>
            <button class="edit-btn" id="editButton">EDITAR</button>
            <button class="delete-btn" id="deleteButton">EXCLUIR</button>
            <% } %>
          </div>

          <form id="clientForm">
            <div class="form-group">
              <label>Nome completo</label>
              <input type="text" name="nome" disabled />
            </div>

            <div class="form-group">
              <label>Tipo de Documento</label>
              <select name="tipoDocumento" id="tipoDocumento" disabled>
                <option value="cnpj">CNPJ</option>
                <option value="cpf">CPF</option>
              </select>
            </div>

            <div class="form-group">
              <label>Documento</label>
              <input type="text" name="documento" id="documento" disabled />
            </div>

            <div class="form-group">
              <label>Email</label>
              <input type="email" name="email" disabled />
            </div>

            <div class="form-group">
              <label>Telefone</label>
              <input type="tel" name="telefone" disabled />
            </div>

            <div class="form-group">
              <label>Observação</label>
              <textarea
                name="observacao"
                id="observacao"
                rows="4"
                disabled
              ></textarea>
            </div>

            <div class="form-group">
              <label>Imagem</label>
              <input
                type="file"
                name="imagem"
                id="imagem"
                accept="image/*"
                disabled
              />
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
                            const clients = <%- JSON.stringify(clients) %>;
                            const clientTableBody = document.getElementById('clientTableBody');

                            document.addEventListener('DOMContentLoaded', function() {
                                const clientRows = document.querySelectorAll('.clients-table tbody tr');
                                const clientDetails = document.getElementById('clientDetails');
                                const editButton = document.getElementById('editButton');
                                const clientForm = document.getElementById('clientForm');
                                const tipoDocumento = document.getElementById('tipoDocumento');
                                const documentoInput = document.getElementById('documento');
                                let isEditing = false;
                                let currentClientId = null;

                                const telefoneMask = new Inputmask('(99) 99999-9999');
                                telefoneMask.mask(document.querySelectorAll('input[name="telefone"]'));

                                function aplicarMascaraDocumento() {
                                    if (tipoDocumento.value === 'cpf') {
                                        const cpfMask = new Inputmask('999.999.999-99');
                                        cpfMask.mask(documentoInput);
                                    } else if (tipoDocumento.value === 'cnpj') {
                                        const cnpjMask = new Inputmask('99.999.999/9999-99');
                                        cnpjMask.mask(documentoInput);
                                    }
                                }

                                aplicarMascaraDocumento();

                                tipoDocumento.addEventListener('change', function() {
                                    aplicarMascaraDocumento();
                                });

                                function populateClientDetails(clientData) {
                                    clientForm.nome.value = clientData.nome;
                                    tipoDocumento.value = clientData.cpf ? 'cpf' : 'cnpj';
                                    documentoInput.value = clientData.cpf || clientData.cnpj;
                                    clientForm.email.value = clientData.email;
                                    clientForm.telefone.value = clientData.telefone;
                                    document.getElementById('observacao').value = clientData.observacao || ''; // Preencher o campo de observação
                                    aplicarMascaraDocumento();
                                }

                                clientRows.forEach(row => {
                                    row.addEventListener('click', function() {
                                        clientRows.forEach(r => r.classList.remove('selected'));
                                        this.classList.add('selected');

                                        currentClientId = this.dataset.id;
                                        const selectedClient = clients.find(client => client.idContratante == currentClientId);

                                        if (selectedClient) {
                                            populateClientDetails(selectedClient);
                                            clientDetails.style.display = 'block';
                                        }
                                    });
                                });

                                editButton.addEventListener('click', async function() {
                                    isEditing = !isEditing;
                                    const inputs = clientForm.querySelectorAll('input');
                                    const select = document.getElementById('tipoDocumento');

                                    if (isEditing) {
                                        editButton.textContent = 'SALVAR';
                                        inputs.forEach(input => input.disabled = false);
                                        select.disabled = false;
                                    } else {
                                        editButton.textContent = 'EDITAR';
                                        inputs.forEach(input => input.disabled = true);
                                        select.disabled = true;

                                        const novoCliente = {
                                          nome: clientForm.nome.value.trim(),
                                          email: clientForm.email.value.trim(),
                                          telefone: limparValor(clientForm.telefone.value),
                                          observacao: document.getElementById('observacao').value.trim(), // Incluir a observação
                                          imagem: document.getElementById('imagem').files[0] || null, // Incluir a imagem
                                          cpf: tipoDocumento.value === 'cpf' ? limparValor(documentoInput.value) : null,
                                          cnpj: tipoDocumento.value === 'cnpj' ? limparValor(documentoInput.value) : null
                                      };

                                        console.log('Dados do novo cliente:', novoCliente);
                                        if (!novoCliente.email) {
                                            alert('O email não pode ser vazio.');
                                            return;
                                        }

                                        try {
                                            const response = await fetch(currentClientId ? `/clientes/${currentClientId}`
                                            : '/clientes/', {
                                                method: currentClientId ? 'PUT' : 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify(novoCliente),
                                            });

                                            if (response.ok) {
                                                const clienteCriado = await response.json();
                                                alert(currentClientId ? 'Cliente atualizado com sucesso!' : 'Cliente criado com sucesso!');
                                                currentClientId ? atualizarTabelaClientes(clienteCriado) : adicionarClienteTabela(clienteCriado);
                                            } else {
                                                const errorData = await response.json();
                                                alert(`Erro ao ${currentClientId ? 'atualizar' : 'criar'} o cliente: ${errorData.message}`);
                                            }
                                        } catch (error) {
                                            console.error('Erro:', error);
                                            alert('Erro ao processar a solicitação. Tente novamente.');
                                        }
                                    }
                                });

                                document.querySelector('.add-client-btn').addEventListener('click', function() {
                                    currentClientId = null;
                                    clientForm.reset();
                                    clientDetails.style.display = 'block';
                                    isEditing = true;
                                    editButton.textContent = 'SALVAR';
                                    const inputs = clientForm.querySelectorAll('input');
                                    const select = document.getElementById('tipoDocumento');
                                    inputs.forEach(input => input.disabled = false);
                                    select.disabled = false;
                                });

                                document.getElementById('deleteButton').addEventListener('click', async function() {
                        const confirmDelete = confirm('Tem certeza que deseja excluir este cliente?');
                        if (!confirmDelete) return;

                        try {
                            const response = await fetch(`/clientes/${currentClientId}`, {
                                method: 'DELETE',
                            });

                            if (response.ok) {
                                alert('Cliente excluído com sucesso!');
                                const linhaExistente = clientTableBody.querySelector(`tr[data-id="${currentClientId}"]`);
                                if (linhaExistente) {
                                    clientTableBody.removeChild(linhaExistente);
                                }
                                clientDetails.style.display = 'none';
                            } else {
                                const errorData = await response.json();
                                alert(`Erro ao excluir o cliente: ${errorData.message}`);
                            }
                        } catch (error) {
                            console.error('Erro:', error);
                            alert('Erro ao processar a solicitação de exclusão. Tente novamente.');
                        }

                        
      });
      document.querySelector('.search-input').addEventListener('input', function() {
          const searchTerm = this.value.toLowerCase(); // Obtém o valor da busca em minúsculas
          const clientRows = document.querySelectorAll('.clients-table tbody tr'); // Seleciona todas as linhas da tabela

          clientRows.forEach(row => {
              const clientId = row.querySelector('td:first-child').textContent.toLowerCase(); // ID do cliente
              const clientName = row.querySelector('td:nth-child(2)').textContent.toLowerCase(); // Nome do cliente

              // Verifica se o ID ou o nome do cliente contém o termo de busca
              if (clientId.includes(searchTerm) || clientName.includes(searchTerm)) {
                  row.style.display = ''; // Mostra a linha se corresponder
              } else {
                  row.style.display = 'none'; // Oculta a linha se não corresponder
              }
          });
                    });

                                function adicionarClienteTabela(cliente) {
                                    const novaLinha = document.createElement('tr');
                                    novaLinha.setAttribute('data-id', cliente.idContratante);
                                    novaLinha.innerHTML = `
                                        <td>${cliente.idContratante}</td>
                                        <td>${cliente.nome}</td>
                                        <td>${cliente.telefone}</td>
                                        <td>${cliente.email}</td>
                                    `;
                                    clientTableBody.appendChild(novaLinha);
                                }

                                // Função para atualizar a tabela de clientes
                                function atualizarTabelaClientes(clienteAtualizado) {
                                    const linhaExistente = clientTableBody.querySelector(`tr[data-id="${clienteAtualizado.idContratante}"]`);
                                    if (linhaExistente) {
                                        linhaExistente.innerHTML = `
                                            <td>${clienteAtualizado.idContratante}</td>
                                            <td>${clienteAtualizado.nome}</td>
                                            <td>${clienteAtualizado.telefone}</td>
                                            <td>${clienteAtualizado.email}</td>
                                        `;
                                    }
                                }
                            });

                            function limparValor(valor) {
                                return valor.replace(/[^\d]/g, '');
                            }
    </script>
  </body>
</html>
